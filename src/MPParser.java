
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jan 03 19:58:16 CET 2023
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Tue Jan 03 19:58:16 CET 2023
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\003\006\000\002\002\004\000\002\003" +
    "\006\000\002\003\005\000\002\003\004\000\002\003\003" +
    "\000\002\004\006\000\002\005\004\000\002\005\003\000" +
    "\002\007\005\000\002\007\006\000\002\007\004\000\002" +
    "\007\005\000\002\010\005\000\002\010\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\006\004" +
    "\000\002\006\003\000\002\012\006\000\002\012\006\000" +
    "\002\012\005\000\002\012\004\000\002\012\005\000\002" +
    "\012\005\000\002\012\004\000\002\012\010\000\002\012" +
    "\005\000\002\012\005\000\002\012\004\000\002\012\007" +
    "\000\002\012\007\000\002\012\006\000\002\012\005\000" +
    "\002\012\004\000\002\012\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\013\005\000\002\013\003" +
    "\000\002\014\005\000\002\014\003\000\002\015\005\000" +
    "\002\015\003\000\002\016\005\000\002\016\005\000\002" +
    "\016\003\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\006\003\005\032\006\001\002\000\004\002" +
    "\144\001\002\000\004\002\ufffc\001\002\000\006\003\007" +
    "\026\010\001\002\000\004\002\ufffd\001\002\000\006\003" +
    "\012\027\011\001\002\000\006\003\014\030\013\001\002" +
    "\000\004\002\ufffe\001\002\000\010\033\016\034\020\035" +
    "\021\001\002\000\004\002\uffff\001\002\000\004\002\001" +
    "\001\002\000\014\003\ufff2\033\ufff2\034\ufff2\035\ufff2\041" +
    "\ufff2\001\002\000\014\003\134\033\016\034\020\035\021" +
    "\041\132\001\002\000\014\003\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\041\ufff1\001\002\000\014\003\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\041\ufff0\001\002\000\026\026\ufff9\030\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\001\002\000\026\026\024\030\013\033\016\034" +
    "\020\035\021\036\032\037\030\040\040\041\031\042\036" +
    "\001\002\000\010\026\024\041\046\042\036\001\002\000" +
    "\064\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\026\uffca\027\uffca" +
    "\030\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\001" +
    "\002\000\036\003\uffd5\011\050\012\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\026\uffd5\027\uffd5\030\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\001\002\000\036\003\uffd3\011\uffd3" +
    "\012\uffd3\021\uffd3\022\uffd3\023\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\001\002" +
    "\000\012\003\125\026\024\041\046\042\036\001\002\000" +
    "\042\003\116\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\025\117\001\002\000\022\003\107" +
    "\026\024\030\013\036\032\037\030\040\040\041\031\042" +
    "\036\001\002\000\026\026\ufffa\030\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\001" +
    "\002\000\024\003\uffdd\026\uffdd\030\uffdd\031\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\001\002\000\056\003" +
    "\uffd1\004\076\005\072\011\uffd1\012\uffd1\013\101\014\075" +
    "\015\073\016\077\017\102\020\074\021\uffd1\022\uffd1\023" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\001\002\000\064\003\uffc8\004\uffc8\005" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\026\uffc8\027\uffc8\030\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\001\002\000\022\026\uffee\030" +
    "\uffee\031\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee" +
    "\001\002\000\012\003\067\026\024\041\046\042\036\001" +
    "\002\000\064\003\uffce\004\uffce\005\uffce\006\061\007\062" +
    "\010\060\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\026\uffce" +
    "\027\uffce\030\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\001\002\000\022\026\024\030\013\031\056\036\032" +
    "\037\030\040\040\041\031\042\036\001\002\000\006\012" +
    "\045\021\044\001\002\000\010\026\024\041\046\042\036" +
    "\001\002\000\010\026\024\041\046\042\036\001\002\000" +
    "\064\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\026\uffc9\027\uffc9" +
    "\030\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\001" +
    "\002\000\036\003\uffd6\011\050\012\uffd6\021\uffd6\022\uffd6" +
    "\023\uffd6\026\uffd6\027\uffd6\030\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\001\002\000\010\026\024\041\046" +
    "\042\036\001\002\000\036\003\uffd4\011\uffd4\012\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\026\uffd4\027\uffd4\030\uffd4\036\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\042\uffd4\001\002\000\006\012" +
    "\045\022\053\001\002\000\010\026\024\041\046\042\036" +
    "\001\002\000\006\012\045\023\055\001\002\000\024\003" +
    "\uffe6\026\uffe6\030\uffe6\031\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\001\002\000\026\002\ufffb\003\ufffb\026" +
    "\ufffb\030\ufffb\031\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\042\ufffb\001\002\000\022\026\uffef\030\uffef\031\uffef\036" +
    "\uffef\037\uffef\040\uffef\041\uffef\042\uffef\001\002\000\010" +
    "\026\024\041\046\042\036\001\002\000\010\026\024\041" +
    "\046\042\036\001\002\000\010\026\024\041\046\042\036" +
    "\001\002\000\064\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\001\002\000\064\003\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\001\002\000\064\003\uffcb\004\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\026\uffcb\027\uffcb\030\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\001\002\000\014\003\070\006" +
    "\061\007\062\010\060\023\071\001\002\000\024\003\uffe7" +
    "\026\uffe7\030\uffe7\031\uffe7\036\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\001\002\000\024\003\uffe8\026\uffe8\030\uffe8" +
    "\031\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\001" +
    "\002\000\024\003\uffe9\026\uffe9\030\uffe9\031\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\042\uffe9\001\002\000\010\026" +
    "\024\041\046\042\036\001\002\000\010\026\uffda\041\uffda" +
    "\042\uffda\001\002\000\010\026\uffd7\041\uffd7\042\uffd7\001" +
    "\002\000\010\026\uffdb\041\uffdb\042\uffdb\001\002\000\010" +
    "\026\024\041\046\042\036\001\002\000\010\026\uffd9\041" +
    "\uffd9\042\uffd9\001\002\000\010\026\024\041\046\042\036" +
    "\001\002\000\010\026\uffdc\041\uffdc\042\uffdc\001\002\000" +
    "\010\026\uffd8\041\uffd8\042\uffd8\001\002\000\042\003\uffd2" +
    "\004\076\005\072\011\uffd2\012\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\001\002\000\064\003\uffd0\004\uffd0\005" +
    "\uffd0\006\061\007\062\010\060\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\026\uffd0\027\uffd0\030\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\001\002\000\064\003\uffcf\004" +
    "\uffcf\005\uffcf\006\061\007\062\010\060\011\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\026\uffcf\027\uffcf\030\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\001\002\000\006\003" +
    "\110\037\111\001\002\000\024\003\uffde\026\uffde\030\uffde" +
    "\031\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\001" +
    "\002\000\024\003\uffdf\026\uffdf\030\uffdf\031\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\001\002\000\012\003" +
    "\113\026\024\041\046\042\036\001\002\000\010\003\114" +
    "\012\045\023\115\001\002\000\024\003\uffe0\026\uffe0\030" +
    "\uffe0\031\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\001\002\000\024\003\uffe1\026\uffe1\030\uffe1\031\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\001\002\000\024" +
    "\003\uffe2\026\uffe2\030\uffe2\031\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\001\002\000\024\003\uffea\026\uffea" +
    "\030\uffea\031\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042" +
    "\uffea\001\002\000\012\003\121\026\024\041\046\042\036" +
    "\001\002\000\010\003\122\012\045\023\123\001\002\000" +
    "\024\003\uffeb\026\uffeb\030\uffeb\031\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\001\002\000\024\003\uffec\026" +
    "\uffec\030\uffec\031\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\001\002\000\024\003\uffed\026\uffed\030\uffed\031" +
    "\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\001\002" +
    "\000\024\003\127\012\045\026\024\030\013\036\032\037" +
    "\030\040\040\041\031\042\036\001\002\000\024\003\uffe3" +
    "\026\uffe3\030\uffe3\031\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\001\002\000\024\003\uffe5\026\uffe5\030\uffe5" +
    "\031\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\001" +
    "\002\000\024\003\uffe4\026\uffe4\030\uffe4\031\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\042\uffe4\001\002\000\006\012" +
    "\045\027\131\001\002\000\064\003\uffc7\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\026\uffc7\027\uffc7\030\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\001\002\000\006\023\ufff3\024\ufff3" +
    "\001\002\000\006\003\141\041\132\001\002\000\026\026" +
    "\ufff6\030\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6" +
    "\040\ufff6\041\ufff6\042\ufff6\001\002\000\006\023\137\024" +
    "\136\001\002\000\004\041\140\001\002\000\026\026\ufff8" +
    "\030\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\001\002\000\006\023\ufff4\024\ufff4" +
    "\001\002\000\026\026\ufff5\030\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\001\002" +
    "\000\006\023\143\024\136\001\002\000\026\026\ufff7\030" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7" +
    "\041\ufff7\042\ufff7\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\014\001\001\000\002\001\001\000" +
    "\010\005\022\007\021\011\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\134\011" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\033\006\041\007\032\011\016\012" +
    "\036\013\042\014\025\015\026\016\034\020\040\021\024" +
    "\001\001\000\016\013\127\014\025\015\026\016\034\020" +
    "\040\021\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\013\123\014\025\015\026\016" +
    "\034\020\040\021\024\001\001\000\002\001\001\000\022" +
    "\004\033\012\105\013\042\014\025\015\026\016\034\020" +
    "\040\021\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\065\021\024\001\001\000\002\001\001" +
    "\000\022\004\033\012\056\013\042\014\025\015\026\016" +
    "\034\020\040\021\024\001\001\000\002\001\001\000\016" +
    "\013\051\014\025\015\026\016\034\020\040\021\024\001" +
    "\001\000\014\014\046\015\026\016\034\020\040\021\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\050\016\034\020\040\021\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\013\053\014\025\015\026\016" +
    "\034\020\040\021\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\064\001\001\000\004\021\063\001\001\000\004\021\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\104\021\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\103\021\024\001\001\000\002\001\001\000\010\016" +
    "\102\020\040\021\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\013\111\014\025\015\026\016\034\020\040\021" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\013" +
    "\117\014\025\015\026\016\034\020\040\021\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\033\012\125\013\042\014\025" +
    "\015\026\016\034\020\040\021\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public int errNum = 0;

   public static void main(String[] args) {
      try {
		   FileReader file = new FileReader(args[0]);
		   Scanner scanner = new MPLexer(file);
		   MPParser parser = new MPParser(scanner);
		   parser.parse();
         switch (parser.errNum) {
            case 0: {
               System.out.println("\nANALYSIS COMPLETE: NO ERRORS FOUND");
               break;
            }

            case 1: {
               System.out.println("\nANALYSIS COMPLETE: " + parser.errNum + " ERROR FOUND");
               break;
            }

            default: {
               System.out.println("\nANALYSIS COMPLETE: " + parser.errNum + " ERRORS FOUND");
               break;
            }
         }
      } catch(Exception e) {
         System.out.println(e);
      }
   }

   public int getLine() {
   	  return ((MPLexer) getScanner()).getLine();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Factor ::= SKRR Expression SKRRT 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 41");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Factor ::= CONST 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 40");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Factor ::= ID 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 39");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Term ::= Factor 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 38");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Term ::= Term LACKIN Factor 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 37");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Term ::= Term DIPPIN Factor 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 36");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Term ::= Term MF Factor 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 35");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ArExpression ::= Term 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 34");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ArExpression ::= ArExpression VIBIN Term 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 33");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ArExpression ::= ArExpression STRESSIN Term 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 32");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RelExpression ::= ArExpression 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 31");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RelExpression ::= ArExpression RelOp ArExpression 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 30");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AndExpression ::= RelExpression 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 29");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AndExpression ::= AndExpression AND RelExpression 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 28");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= AndExpression 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 27");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= Expression OR AndExpression 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 26");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RelOp ::= MOREEQUAL 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 25");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RelOp ::= MORETHAN 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 24");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RelOp ::= CAPPIN 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 23");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RelOp ::= TBH 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 22");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RelOp ::= LESSEQUAL 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 21");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RelOp ::= LESSTHAN 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 20");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= Block 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 19");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= DO error 
            {
              Object RESULT = null;
		
         System.out.println("\tLINE " + parser.getLine() + ": MISSING DO WHILE STATEMENT");
         parser.errNum++;
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= DO Statement error 
            {
              Object RESULT = null;
		
         System.out.println("\tLINE " + parser.getLine() + ": MISSING DO WHILE TERMINAL");
         parser.errNum++;
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= DO Statement WHILE error 
            {
              Object RESULT = null;
		
         System.out.println("\tLINE " + parser.getLine() + ": MISSING DO WHILE EXPRESSION");
         parser.errNum++;
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= DO Statement WHILE Expression error 
            {
              Object RESULT = null;
		
         System.out.println("\tLINE " + parser.getLine() + ": MISSING DO WHILE RN");
         parser.errNum++;
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= DO Statement WHILE Expression RN 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 18");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= WHILE error 
            {
              Object RESULT = null;
		
         System.out.println("\tLINE " + parser.getLine() + ": MISSING WHILE EXPRESSION");
         parser.errNum++;
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= WHILE Expression error 
            {
              Object RESULT = null;
		
         System.out.println("\tLINE " + parser.getLine() + ": MISSING WHILE STATEMENT");
         parser.errNum++;
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= WHILE Expression Statement 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 17");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= Expression SUSSIN Expression BUSSIN Expression RN 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 16");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= POPPIN error 
            {
              Object RESULT = null;
		
         System.out.println("\tLINE " + parser.getLine() + ": MISSING POPPIN TERM");
         parser.errNum++;
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= POPPIN Term error 
            {
              Object RESULT = null;
		
         System.out.println("\tLINE " + parser.getLine() + ": MISSING POPPIN RN");
         parser.errNum++;
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= POPPIN Term RN 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 15");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= ID error 
            {
              Object RESULT = null;
		
         System.out.println("\tLINE " + parser.getLine() + ": MISSING ASSIGNMENT COMPONENT");
         parser.errNum++;
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= ID BE error 
            {
              Object RESULT = null;
		
         System.out.println("\tLINE " + parser.getLine() + ": MISSING ASSIGNMENT COMPONENT");
         parser.errNum++;
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= ID BE Expression error 
            {
              Object RESULT = null;
		
         System.out.println("\tLINE " + parser.getLine() + ": MISSING ASSIGNMENT COMPONENT");
         parser.errNum++;
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= ID BE Expression RN 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 14");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StatementList ::= Statement 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 13");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 12");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= BAG 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 11");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= RACK 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 10");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= FR 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 9");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NameList ::= ID 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 8");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NameList ::= NameList COMMA ID 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 7");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarDecl ::= Type Type error 
            {
              Object RESULT = null;
		
         System.out.println("\tLINE " + parser.getLine() + ": MISSING VARDECL COMPONENT");
         parser.errNum++;
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= Type error 
            {
              Object RESULT = null;
		
         System.out.println("\tLINE " + parser.getLine() + ": MISSING VARDECL COMPONENT");
         parser.errNum++;
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecl ::= Type Type NameList RN 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 6");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecl ::= Type NameList RN 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 5");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarList ::= VarDecl 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 4");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*VarList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarList ::= VarList VarDecl 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 3");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*VarList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Block ::= HIGHKEY VarList StatementList LOWKEY 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 2");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= error 
            {
              Object RESULT = null;
		
         System.out.println("\tLINE " + parser.getLine() + ": MISSING CHIEF");
         parser.errNum++;
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= CHIEF error 
            {
              Object RESULT = null;
		
         System.out.println("\tLINE " + parser.getLine() + ": MISSING CHIEF SKRR");
         parser.errNum++;
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= CHIEF SKRR error 
            {
              Object RESULT = null;
		
         System.out.println("\tLINE " + parser.getLine() + ": MISSING CHIEF SKRRT");
         parser.errNum++;
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= CHIEF SKRR SKRRT error 
            {
              Object RESULT = null;
		
         System.out.println("\tLINE " + parser.getLine() + ": MISSING BLOCK");
         parser.errNum++;
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= CHIEF SKRR SKRRT Block 
            {
              Object RESULT = null;
		
         System.out.println("SHIFT REDUCTION 1");
      
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

